// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum untuk Role
enum Role {
  USER
  ADMIN
  OWNER
}

// Model User
model User {
  id              String    @id @default(uuid())
  firstName       String    @map("first_name") @db.VarChar(50)
  lastName        String    @map("last_name") @db.VarChar(50)
  username        String    @unique @db.VarChar(30)
  email           String    @unique @db.VarChar(255)
  password        String    @db.VarChar(255)
  phoneNumber     String?   @map("phone_number") @db.VarChar(20)
  country         String?   @db.VarChar(50)
  address         String?   @db.VarChar(255)
  profileImage    String?   @map("profile_image") @db.VarChar(500)
  role            Role      @default(USER)
  isActive        Boolean   @default(true) @map("is_active")
  suspendedAt     DateTime? @map("suspended_at")
  suspendedReason String?   @map("suspended_reason") @db.Text
  lastLogin       DateTime? @map("last_login")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at") // Soft delete

  // Relations
  refreshTokens     RefreshToken[]
  passwordResets    PasswordReset[]
  blacklistedTokens BlacklistedToken[]
  review            Review[]

  @@index([email])
  @@index([username])
  @@index([role])
  @@index([isActive])
  @@index([deletedAt])
  @@map("users")
}

// Model untuk menyimpan Refresh Token
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique @db.VarChar(500)
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

// Model untuk menyimpan token yang di-blacklist (logout)
model BlacklistedToken {
  id        String   @id @default(uuid())
  token     String   @unique @db.VarChar(500)
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
  @@map("blacklisted_tokens")
}

// Model untuk Password Reset Token
model PasswordReset {
  id        String    @id @default(uuid())
  email     String    @db.VarChar(255)
  token     String    @unique @db.VarChar(500)
  userId    String    @map("user_id")
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([token])
  @@index([expiresAt])
  @@map("password_resets")
}

// Model Product (update)
model Product {
  id            String  @id @default(uuid())
  name          String
  slug          String  @unique // SEO-friendly URL
  idDescription String? @map("id_description") @db.Text
  enDescription String? @map("en_description") @db.Text
  idPrice       Int     @map("id_price")
  enPrice       Int     @map("en_price")
  imageUrl      String? @map("image_url") // highlight / thumbnail image

  // üìä Hybrid analytics fields
  totalSold Int    @default(0) @map("total_sold")
  totalView Int    @default(0) @map("total_view")
  avgRating Float? @default(0.0) @map("avg_rating")

  // üì¶ Informasi pengiriman (buat integrasi Biteship)
  weight Int? // gram
  height Int? // cm
  length Int? // cm
  width  Int? // cm

  // üí∞ Tax & Pricing
  taxRate Float? @default(0.0) @map("tax_rate") // e.g. 0.11 for 11% PPN

  // üîó Relationships
  categoryId String?   @map("category_id")
  category   Category? @relation(fields: [categoryId], references: [id])

  promotionId String?    @map("promotion_id")
  promotion   Promotion? @relation(fields: [promotionId], references: [id])

  tags     ProductTag[]
  reviews  Review[]
  variants ProductVariant[]

  // ‚öôÔ∏è Status & Features
  isActive     Boolean   @default(true) @map("is_active")
  isFeatured   Boolean   @default(false) @map("is_featured") // Show on homepage
  isPreOrder   Boolean   @default(false) @map("is_pre_order")
  preOrderDays Int?      @default(0) @map("pre_order_days") // Berapa hari pre-order
  deletedAt    DateTime? @map("deleted_at") // Soft delete

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([categoryId])
  @@index([promotionId])
  @@index([slug])
  @@index([isActive])
  @@index([isFeatured])
  @@index([deletedAt])
  @@map("products")
}

// Model ProductVariant
model ProductVariant {
  id          String @id @default(uuid())
  productId   String @map("product_id")
  variantName String @map("variant_name") // misal: "Black L", "White XL"
  sku         String @unique
  stock       Int    @default(0) @map("stock")

  product Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  images  ProductVariantImage[]

  // ‚öôÔ∏è Status
  isActive  Boolean   @default(true) @map("is_active")
  deletedAt DateTime? @map("deleted_at") // Soft delete

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([productId])
  @@index([sku])
  @@index([isActive])
  @@map("product_variants")
}

// Model ProductVariantImage (update)
model ProductVariantImage {
  id        String @id @default(uuid())
  variantId String @map("variant_id")
  imageUrl  String @map("image_url")

  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@index([variantId])
  @@map("product_variant_images")
}

// Model Category
model Category {
  id        String    @id @default(uuid())
  name      String
  slug      String    @unique // SEO-friendly URL
  isActive  Boolean   @default(true) @map("is_active")
  products  Product[]
  deletedAt DateTime? @map("deleted_at") // Soft delete

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([slug])
  @@index([isActive])
  @@index([deletedAt])
  @@map("categories")
}

// Model Promotion
model Promotion {
  id        String    @id @default(uuid())
  name      String
  discount  Float // e.g. 0.15 for 15% off
  startDate DateTime  @map("start_date")
  endDate   DateTime  @map("end_date")
  isActive  Boolean   @default(true) @map("is_active")
  products  Product[]
  deletedAt DateTime? @map("deleted_at") // Soft delete

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([startDate, endDate])
  @@index([isActive])
  @@index([deletedAt])
  @@map("promotions")
}

// Model Tag (update)
model Tag {
  id        String       @id @default(uuid())
  name      String       @unique
  slug      String       @unique // SEO-friendly URL
  isActive  Boolean      @default(true) @map("is_active")
  products  ProductTag[]
  deletedAt DateTime?    @map("deleted_at") // Soft delete

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([slug])
  @@index([isActive])
  @@index([deletedAt])
  @@map("tags")
}

// Junction Table: Product <-> Tag (Many-to-Many)
model ProductTag {
  productId String
  tagId     String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([productId, tagId])
  @@index([productId])
  @@index([tagId])
  @@map("product_tags")
}

// Model Review (update)
model Review {
  id        String        @id @default(uuid())
  userId    String        @map("user_id")
  productId String        @map("product_id")
  rating    Int           @default(0) // 1-5
  comment   String?       @db.Text
  images    ReviewImage[] // Ubah dari String[] ke relasi ke ReviewImage

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([productId])
  @@index([userId])
  @@index([rating])
  @@map("reviews")
}

// Model ReviewImage (tambahkan)
model ReviewImage {
  id       String @id @default(uuid())
  reviewId String @map("review_id")
  imageUrl String @map("image_url")

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])
  @@map("review_images")
}
