// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum untuk Role
enum Role {
  USER
  ADMIN
  OWNER
}

// Model User
model User {
  id              String    @id @default(uuid())
  firstName       String    @map("first_name") @db.VarChar(50)
  lastName        String    @map("last_name") @db.VarChar(50)
  username        String    @unique @db.VarChar(30)
  email           String    @unique @db.VarChar(255)
  password        String    @db.VarChar(255)
  phoneNumber     String?   @map("phone_number") @db.VarChar(20)
  country         String?   @db.VarChar(50)
  address         String?   @db.VarChar(255)
  profileImage    String?   @map("profile_image") @db.VarChar(500)
  role            Role      @default(USER)
  isActive        Boolean   @default(true) @map("is_active")
  suspendedAt     DateTime? @map("suspended_at")
  suspendedReason String?   @map("suspended_reason") @db.Text
  lastLogin       DateTime? @map("last_login")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")
  deletedAt       DateTime? @map("deleted_at") // Soft delete

  // Relations
  refreshTokens     RefreshToken[]
  passwordResets    PasswordReset[]
  blacklistedTokens BlacklistedToken[]

  @@index([email])
  @@index([username])
  @@index([role])
  @@index([isActive])
  @@index([deletedAt])
  @@map("users")
}

// Model untuk menyimpan Refresh Token
model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique @db.VarChar(500)
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

// Model untuk menyimpan token yang di-blacklist (logout)
model BlacklistedToken {
  id        String   @id @default(uuid())
  token     String   @unique @db.VarChar(500)
  userId    String   @map("user_id")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
  @@map("blacklisted_tokens")
}

// Model untuk Password Reset Token
model PasswordReset {
  id        String    @id @default(uuid())
  email     String    @db.VarChar(255)
  token     String    @unique @db.VarChar(500)
  userId    String    @map("user_id")
  expiresAt DateTime  @map("expires_at")
  usedAt    DateTime? @map("used_at")
  createdAt DateTime  @default(now()) @map("created_at")

  // Relation
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([token])
  @@index([expiresAt])
  @@map("password_resets")
}
